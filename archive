<!DOCTYPE html>
<html>
<head>
    <title>NASCAR Pick'em Scoreboard</title>
    <style>
        body {
            font-family: system-ui, -apple-system, sans-serif;
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .race-info {
            margin-bottom: 20px;
            padding: 15px;
            background: #1a365d;
            color: white;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
        }
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
            overflow-x: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
            min-width: 80px;
        }
        th {
            background-color: #1a365d;
            color: white;
            position: sticky;
            top: 0;
        }
        th .score {
            font-size: 1.2em;
            font-weight: bold;
            color: #ffd700;
        }
        tr:nth-child(even) {
            background-color: #f0f4f8;
        }
        .position-col {
            background-color: #1a365d;
            color: white;
            font-weight: bold;
        }
        .car-number {
            color: #666;
            font-size: 0.9em;
        }
        .player-pick {
            background-color: #e2e8f0;
        }
    </style>
</head>
<body>
    <div class="race-info">
        <div id="race-name"></div>
        <div id="race-status"></div>
        <div id="lap-counter"></div>
    </div>
    
    <div class="card">
        <table id="pickem-grid">
            <thead>
                <tr id="header-row">
                    <th style="width: 100px">Position</th>
                    <th style="width: 80px">Car #</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <script>
        // Define players and their picks
        const players = [
            {
                name: "Kris",
                picks: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"] // Replace with actual car numbers
            },
            {
                name: "Breanna",
                picks: ["11", "12", "17", "24", "38", "54", "60", "71", "23", "34"]
            },
            {
                name: "Brian",
                picks: ["5", "8", "9", "22", "34", "41", "43", "84", "2", "6"]
            },
            {
                name: "Jana",
                picks: ["11", "12", "16", "22", "43", "2", "5", "6", "8", "9"]
            },
            {
                name: "Connor",
                picks: ["12", "22", "23", "24", "43", "48", "4", "5", "6", "8"]
            },
            {
                name: "Austin",
                picks: ["12", "16", "17", "22", "4", "5", "8", "9", "1", "77"]
            },
            {
                name: "Jeff",
                picks: ["16", "17", "22", "45", "48", "51", "56", "71", "1", "8"]
            },
            {
                name: "Travis",
                picks: ["17", "20", "23", "34", "41", "45", "47", "71", "1", "2"]
            },
            {
                name: "Nate",
                picks: ["12", "19", "22", "24", "34", "45", "71", "2", "8", "11"]
            },
            {
                name: "Tommy",
                picks: ["12", "17", "22", "23", "24", "40", "71", "2", "6", "8"]
            },
            {
                name: "Drew",
                picks: ["11", "12", "16", "22", "23", "24", "56", "71", "5", "6"]
            },
            {
                name: "Susan",
                picks: ["22", "23", "24", "45", "71", "2", "5", "6", "8", "10"]
            },
            {
                name: "Ash",
                picks: ["22", "23", "24", "40", "45", "48", "56", "2", "5", "11"]
            },
            {
                name: "Alora",
                picks: ["22", "23", "24", "45", "56", "71", "8", "9", "11", "12"]
            }
        ];

        // Add player columns to header
        const headerRow = document.getElementById('header-row');
        players.forEach(player => {
            const th = document.createElement('th');
            th.innerHTML = `${player.name}<br><span class="score">0</span>`;
            headerRow.appendChild(th);
        });

        async function updateRaceData() {
            try {
                const response = await fetch('https://cf.nascar.com/live/feeds/live-feed.json');
                const data = await response.json();
                
                // Update race info
                document.getElementById('race-name').textContent = data.run_name;
                document.getElementById('race-status').textContent = 
                    `Stage ${data.stage.stage_num} - ${data.stage.laps_in_stage} laps`;
                document.getElementById('lap-counter').textContent = 
                    `Lap ${data.lap_number} of ${data.laps_in_race}`;
                
                // Sort vehicles by running position
                const sortedVehicles = data.vehicles.sort((a, b) => 
                    a.running_position - b.running_position);
                
                // Clear and rebuild table body
                const tbody = document.querySelector('#pickem-grid tbody');
                tbody.innerHTML = '';
                
                // Initialize player scores
                const playerScores = players.reduce((acc, player) => {
                    acc[player.name] = 0;
                    return acc;
                }, {});
                
                // Create a row for each position
                sortedVehicles.forEach(vehicle => {
                    const row = tbody.insertRow();
                    
                    // Position column
                    const posCell = row.insertCell();
                    posCell.textContent = vehicle.running_position;
                    posCell.className = 'position-col';
                    
                    // Car number column
                    const carCell = row.insertCell();
                    carCell.textContent = vehicle.vehicle_number;
                    carCell.className = 'car-number';
                    
                    // Player columns
                    players.forEach(player => {
                        const cell = row.insertCell();
                        if (player.picks.includes(vehicle.vehicle_number)) {
                            cell.textContent = vehicle.vehicle_number;
                            cell.className = 'player-pick';
                            playerScores[player.name] += vehicle.running_position;
                        }
                    });
                });
                
                // Update scores in header
                players.forEach(player => {
                    const header = headerRow.querySelector(`th:nth-child(${players.indexOf(player) + 3})`);
                    const scoreSpan = header.querySelector('.score');
                    scoreSpan.textContent = playerScores[player.name];
                });
                
                // Sort headers by score
                const headers = Array.from(headerRow.children).slice(2); // Skip Position and Car# columns
                headers.sort((a, b) => {
                    const scoreA = parseInt(a.querySelector('.score').textContent);
                    const scoreB = parseInt(b.querySelector('.score').textContent);
                    return scoreA - scoreB;
                });
                
                // Reorder columns
                const columnOrder = ['Position', 'Car #', ...headers.map(h => h.textContent.split('\n')[0])];
                const rows = tbody.getElementsByTagName('tr');
                for (let i = 0; i < rows.length; i++) {
                    const cells = Array.from(rows[i].cells);
                    const reorderedCells = columnOrder.map(header => 
                        cells.find((_, index) => 
                            headerRow.children[index].textContent.includes(header)
                        )
                    );
                    rows[i].innerHTML = '';
                    reorderedCells.forEach(cell => rows[i].appendChild(cell));
                }
                
                // Update header order
                headerRow.innerHTML = '';
                columnOrder.forEach(header => {
                    const th = headers.find(h => h.textContent.includes(header)) || 
                             document.createElement('th');
                    if (header === 'Position') {
                        th.textContent = 'Position';
                        th.style.width = '100px';
                    } else if (header === 'Car #') {
                        th.textContent = 'Car #';
                        th.style.width = '80px';
                    }
                    headerRow.appendChild(th);
                });
                
            } catch (error) {
                console.error('Error fetching race data:', error);
            }
        }

        // Update data every 15 seconds
        updateRaceData();
        setInterval(updateRaceData, 15000);
    </script>
</body>
</html>
